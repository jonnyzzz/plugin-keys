package com.github.jonnyzzz.pluginkeys.services

import com.fasterxml.jackson.databind.node.ObjectNode
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import org.bouncycastle.asn1.x509.BasicConstraints
import org.bouncycastle.asn1.x509.Extension
import org.bouncycastle.cert.X509CertificateHolder
import org.bouncycastle.cert.jcajce.JcaX509CertificateHolder
import org.bouncycastle.openssl.PEMKeyPair
import org.bouncycastle.openssl.PEMParser
import java.io.StringReader
import java.security.cert.X509Certificate
import java.util.Base64

fun main() {
    val theLicense =
            """
                eyJ4NWMiOlsiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVWk1ha05EUVhoaFowRjNTVUpCWjBsVlUzVkNUblJXTkV0Q1FsRlBjMWxCUkdsSFRtZE1XRFJtYTBoVmQwUlJXVXBMYjFwSmFIWmpUa0ZSUlV3S1FsRkJkMHA2Uld4TlEwMUhRVEZWUlVGNFRXTmhWMUpzWTNrMWMyRlhUbXhpYms1d1ltMWpkV0Z0VmpCWmJrcG9ZVmMxZWt4dFRuWmlWRUZsUm5jd2VRcE9SRUY2VFVSbmQwOVVWWGxOYW1oaFJuY3dlVTVVUVhwTlJHZDNUMVJWZVU1VVdtRk5RMk40U2xSQmFrSm5iMHByYVdGS2F5OUpjMXBCUlVKRmVGVjRDa3hxVFhWT2FUUjRUR3BSZFUxVE5ERk9lbU40VFdrMGVFMVVSWGRuWjBscFRVRXdSME5UY1VkVFNXSXpSRkZGUWtGUlZVRkJORWxEUkhkQmQyZG5TVXNLUVc5SlEwRlJRemt5Y0ZOb1oxRTJlRkZJTTJOVlNXUkZObUV4U0VselExSXJhbk5HUTJKeU0zaEVNR04xYzJGeFJEUnRTbFJOWXpKTlNVMU9aa2hWVVFwc2F6ZEtVMFp3WVdSWmJsVk9hbkZSUTNCM2RUVlFlbWcxUm5kU1EzRmxZV3c0V214R1F6TnZZMk0yV1N0T1lqTTFka2hGUkVaYVJVWXphRmt3VGxGQ0NpOVRkME5TVGs5TVptWnFhVkFyZEU5QlIwbG5kMDlYTlVwSlZXNUxSV3BGU0ZGS2VEazRXV0pHT1cxc2NETmlSMlpzTlhZck5XSmhTWGhITnpreldsTUtNRXMyWkVJeWIxaEZOMEl3UzBGbU5UZDVPSEV6VFVReFowZGlVSGQwVGtveFJrTklTbXhKUlVwS1RWZDBUaXQxT1d0emRISlVZU3RTWVZwRFVrWTVMd3BKWW1aYWF6azNlRnB2YVM5SE1WZHdVakZoWlRCNlRIVk5abFJ3YTBWV1NsRnBWVTh4YlVKdGVrWkllVXdyWjBjdlVXZFVTRWRFZURkTFEyODRZbWc1Q2xSU1pTdG5Ra2xNWVV4NlZuQTRXRTlWWTBWTk1XOXhVR1ZXWWtaMGNWaDBlamw0VjFZMmVtY3JTM2MzWlhZMWRtcDRaR0ZYVERsSVEydzBUbGRHVlhjS2FrbFpVRFZRWWxSblFrcE9NMFJWT1cxVFNXZFNURGRUVjJZeGFYRjVTVzlJUlZaSmF6QnBjMFl4UW5vNVVYQmlRbkI0TlRoWE9GQkJTMW8wSzBwc1JncFJWa1pzUVVzM1dVdEdkazVXU1ZsUFlqQjJORVV2VDBJdlNWTjZRVE0zYTFWNFV6Wk1OWGRHWVhKeU5tSXJUVFZyZVdJdmNFNVNLMU5RV0Zjd05XdGlDbEpLY0ZKQ2FWRk9TMFp4YmxBd01rWjVZbWhwUjJaM2FtSnpTV2swU3pObGNHMVFlbmRaU1haSVNtZExZMWhqTWprMlRubG9lSEZ3YTNVMmRESTFkR1lLZFVGdUt6ZHdRbmhQTUVOd1VUSm9VVzkzTWpKWlJtWkZLMjA0UVZBcmVFdDBTRmxpYlVoT1IzSXhLMmxGVEdvelVuWkxaRU13UzNoNVkzbE5PVzVRVFFwSlFtSm1kVnBJU0N0UGMxVmhjbEJNTVZsSWFrWnpaVFpuTkdweVVtWjZNM3AwU2xCQ1VuZEtUMUJDWkZZNVNHOUVVVWxFUVZGQlFtOHhTWGRWUkVGUENrSm5UbFpJVVRoQ1FXWTRSVUpCVFVOQ05FRjNTRkZaUkZaU01FOUNRbGxGUmtVck5HMTNjMnhOTm01bGNYSTRXa2Q1WTFwdVdFZHhjM1F4WmsxQ09FY0tRVEZWWkVsM1VWbE5RbUZCUms1WlJGcHJaa0Y2WVdWVE5tdFdSbWRxZUhGeFYyNVpRM2RQZWsxQk1FZERVM0ZIVTBsaU0wUlJSVUpEZDFWQlFUUkpRd3BCVVVGbWFGUXlTbEZUVmtNMWIzZHpRakpHTWxjM2QwMWlSWFJDV0Vsc1FubElTMngxY3k5aWRqZFdLMkZTWTI1dE0wNVBjMFZtZWxOS1VEY3lXbGh1Q2t3MFQyMHJOa1JoZVdaSVNsaGxSWE40WXpoMldtbDRZV1pqZDBsaVZUbGpSSFpzVUVWRmFucDRjRUVyWlhKWGIxaDJhR0k1U0Nzdk56VXlWazF2WjFvS2FUaDFjVWx4VmpKS05rNW5UemhaVHpOT05IUk1SSE5wUmpSWldFTXhkMWMxTjA4M1lrMXpVV1ZCTjNKVldscEtVR00yYmtSVVZucDBkbWxXYWs5b1FRcHVUV2wyVDFGdFQyUjJXWHBrWnpWU1JGY3dObEpqYTJwWVZWVk5kSGQxTUVKRlF6QnRjMUZyVDNwU016bHRkVXd2YmxJNFpFcDVNVEpoU3psb2VXWnZDakZyT1RSNWJVNDBWblpwY0ZJMmVFUjZRWEJ0T0RrM1VXMXFNMVZpTDNKcE9DOU1UakprTlZZNGMxaDZjMlZKWWt0aVMzVkxSV1ZWVWtFd1ZtUTFaVk1LZFVKVVQwd3hkVFZVVFZsRlNDOUlLMmwwY2psNU9FNUpXVkZrZW5kWU1UUjBaM1p0VUZFNVdVZ3ZVVmhwTkV4V2RrdFZNREI1YW5oTFpXaFRNMk5CTUFwc1pVVnhhMlZhTUZoTk1VMDNhV2RIVms0M2NEWjRiSGhvY1hCeVpTOVZZV0pCVEVOQlZUWlpTRTgxTkVNMlFYRnpSMG92VDNaM2JIaFNOVVJ3UkU1NENraFdhV2xzUmsxMksxaFVhekZ6ZWpKa1pVWnVTSGRtT0ZnemVtcE9hMVp2UjFSeGJFdFVTM2xEYURVMmVHeFJVVkpuZDNOelVtdHNVa2tyVW1vd016VUtOMlpXV0dKc1NuZEZXalZVUTFWaU9XTkJNalZoVm5GcGRXbHVSRzVJVUhkSmFYcGpXbXA0ZFZwR2QxZDNSVlpSYjJjdk5IWkVjVVZUVEhwbVlXRkRUZ3B1Y2paelRYVjVUM29yT0RkcldXZ3liVWx4YzFOa1JrZFllblppY0VkNFdqbFJNR2gzTDJkcFNYVkNTME5MTUZOTVRubHlaMG8wVFdScWEyaEpaMDUxQ201cmFVa3ZSbXhOUW5KbGFFMVJiVlpZUWtKeFpERkVZekZXU1ZaWFpXRnFiRkZUYTFOVVZEUlVVVFJMTlZFOVBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdCIsIkxTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVpIZWtORFFYZFBaMEYzU1VKQlowbENSVVJCVGtKbmEzRm9hMmxIT1hjd1FrRlJjMFpCUkVGa1RWSnpkMGRSV1VSV1VWRkVSRUpLVFdGWFRtd0tZbTVPYkVsR1RteGpibHBzWTI1TloxRXdSWGRKUW1OT1RXcFJkMDFVVFhkTmFrVjRUWHBOTlZkb1oxQk5ha0V6VGtSQmVFMVVZM2xOVkVWNlRYcHNZUXBOUTJONFNsUkJha0puVGxaQ1FVMVVTRWRzYTFwWVRYVmlSMnhxV2xjMWVtRlhOVzVNYlhCc1pFZEtlVmxYYkhWamVUVnFZakl3ZDJkblNXbE5RVEJIQ2tOVGNVZFRTV0l6UkZGRlFrRlJWVUZCTkVsRFJIZEJkMmRuU1V0QmIwbERRVkZFZGtGMGNtMUVkQ3RzWVZwU01uaGpjWEI0UW1seGRuTnFhV2xoVjNRS1FURlFXV2hQUTFvMmJEZEdTVmtyU1hkelMwUnlWMjFwUW5OR2VXRjFUVFU1WjNwcFozcHZkV0pEVWxGamJVUTVPVVZOY213M1owVm5ObE5HYmswd2NBcElRbEpCY2tKYUwybFpUMkZ3WkVSTE9GUnBSRFJWVEdSbVkyTk5Ta0p3WVdNM2RuQTFWek5aTHpKRGNUTktOazlhVGpGMlExTlNSRlJ3Wld4UlVWTkdDbFJoTUdrNVZUWjZhMVZGWVdsNVJtWnhNakZzWlVNNGVFSjRkR1ZXWldod2EwOVphWFJGVmpOSWFucFJLMWhETVRsdFlsTnZObFJQZUhGNFVXMVVaMmNLUTJSbWRFRm9RVVZIUkN0eVYxSmFMMk5SUzJkbE9EWnRRVzFHYlhsNE1HaGpOblp0TDFKMFJVSjBTVkV5ZDNGWmNVaHNXVEZCUkhWbE5rUnVORU5QZWdwMFdYWnpTRUZ1TURkRlprZE9WWEZTZEZaUWFYRXhURm96ZFhwT1VpOTBVbk5qYmxwa05HaFRNRGhKVkhCNmJWazVWa3B5ZW5sTFlYaDRUM1UyZVROT0NtMDNjMmt4U0RkdkszUTRWa00zZVZkc1VHRjJaR0pRVVN0bVZXSXdhRkZIWjNBNU9GaDFOMkpRT0U1aFJWbDZjRkoyYVdKNFNVYzFPV0pJUms4MkwxZ0tSRU5xWVhWcVNYTmFkMDU2ZVd4aFZrOVphVmxXWmxONFZWWldPVUkzZVZOU1ZGRm1Za1Z6UzFvNFFWTkJNSE55UjNOS1ZXNVljMWxKTlc4ek4zVnhZd3BvUkdWNFkwdElNVWhNTkRnNU9WTjJlbWw0YWs1aGVtRnBkRUZKV0hneGN6Sm5ZbEJrWTFwTFJrWnBkV1Z4VFZSTGRsWmlhRWRsVmxwNEszb3dhVnAxQ2pOU04xWkRWVXRLYkZoQ1YweGxjM1pxTW0xeGFrRmFRa1JVTW00eFdFbG1iVzFRYjFaSFNrcEVSMEZTVURaaEwxbHZSWEZqV2xsTE1sSjJhazU2VWxvS1oxbG1NWGx2ZDJSME16STRNRlpCVTFWdE4wMXRkMkV3YzIxSFdWbGhSRGRtVjBGclRuazNaRmM1VDJOdVRGVTBUVVpsU2pnNE9WRlNVaXMzTldaSlVRcHlXbnBHYlV4WFRHSmtkeXQzZDBsRVFWRkJRbTh4YjNkWFJFRmtRbWRPVmtoUk5FVkdaMUZWTVdkT2JWSTRSRTV3TlV4eFVsVlhRMUJIY1hCaFpHZE1Da0UzVFhkRVoxbEVWbEl3VUVGUlNDOUNRVkZFUVdkRlIwMUNTVWRCTVZWa1JYZEZRaTkzVVVsTlFWbENRV1k0UTBGUlJYZEZkMWxLUzNkWlFrSkJSMFFLZDI1Q2RrSkJXVlJDUld4RlVsWk5kMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUZFWjJkSlFrRktka3hVZW1vNFZ6VlpRVFZtYlVWdmVETkVhVkpWTndwSldTdGhlVmRLZEZObWEwTkZLM1UzZG5GQ1JsbHBZakpwWlVOamFWYzVZVFJYT0hCSlduQm1jSGwyTVZGdGQyaGtRME5tVkRNeFEwNHpXRFpwYVVrckNqaFRTM3BuZVhSMlZtUXZkalUyVERGdGVYSlFhRmhCV25KR01sZE5UR05HZDA0dlltcFRjekJtZVN0d1VpdGpRVTB3YW5GcVVrUkpMMmxzZURWNVpsQUtNak4xVGpkMmRtRlFlVkpSVERWdWRtSlNPREI2YjBSdkt6ZE5SekJLTVdaTUwzZ3hPSEEzV1dSeFJqYzRNRVV2TlVoeVRVUlZSR0U1UldaVWEwOTZaUW80ZW10cVNVTmFiMGhvTHpsMVJYZDRVVU5hUjJOV01tWlFRa3BJZGxwa2VuWk1WVE5IY1Voc04ydFRVV2RzTkdwblYyZFFkall6SzJKQllsbDVXbW80Q2t0dGNHZGpaVlpQYjFVdlZIWkRTWGxqV1RaNFpHeE5TSGRJSzBSTFZEaFViRUUxYjNsaFNGaHNkVXhuUzFCME0yNVFUMUJFVEVwclZXNTNUbVJ2U2prS2EwbHJiVVJ0U0hadlJuZDFkblpWVkdkRVVsTlJjRmwyY2tac1UxUTJUVWt5TWl0MU9XRkJZVTRyT1hWeGQwVlpVV1ZUWjNSSk0yOTBVbmhLY0ZscFVRcG5aMHNyZGxReWMwNUhPRUoyTlc5MlNXZHhaR2xzTDJGeVlWWnViak56UTNWMlMxUnhTVkJxWkV0U1EzSnNTakZHVlZVMUx6Y3JMMGxpYlROQ1JFaDFDbXhxVFdOS2MzVkxlQzlxTWxWaFJTc3laelJ2Wm5ONVdVNDNlV3Q2WkRVeFdsWkRhVVV4UkZNMFExVlFRa3BZS3pOemVsTlNaamsyZWt4eWVqbEtXVFlLYUZaQ2FFTjFlRkZ5Ym5SemFGZE1OVzkxYld0T2NWRXhWSEppYTNBNWVWRXhiRkJTTm1abEsxUm1SMXBaVTJGTlRXTm5kbmRzVG05MWR6TlpOVE5qZFFveVJXRm5NVmxQTkhKelNHSnJORTh5ZGxkYWJGaFVjSFZwTjJKVGVUSXplVlJSUlVKdFpGQm5iVVZMTm5GTmVUVlFVbGRMUjNoMmEweFBjamh5TW05akNtOU9UWE5LZUd0RE5XcDNNRmxqVmt3eVdrcE1DaTB0TFMwdFJVNUVJRU5GVWxSSlJrbERRVlJGTFMwdExTMD0iXSwiYWxnIjoiUlM1MTIifQ..fz1GUo4-1Ememm6AJbJvQb3NhbOaEY7O8zVofxwdTLsBsW21KPobE93UFCywsi8pARXvNnmc2bTwo22lxePyIg-oQ3mQC8Ud1nkMvG_PB4CODiPq8H_67f1RqmMqRO8c7mgeg3QJzS0oJEvTmCYIvpXpU1kKVWSxgE_iYdmkiAKsUAiL6dWR_QFknd1AkT0z2Mq2SrXnXyV7EecV2yrhzOeXdsi9vZVRxXaGvby3ejzKJckI9RcUnRRiw5OVpBjcT7_R6TiQMmxl9IXXrQs0ED9iUJy6QXx-r0UkpLRfHwwVHhZF5jdtOhPpRosthquXqlIeg1Rjy_2A1NFQzlvhqkGdgYQ6wNilvCWVp3vVUyXw1PcgjWOdWJVzUYXasx1Pa11tEk0bHcr-U8jHZw9UsFHYMB0mvZLkGg7XciHdBgGAGgFZZ7RENgZpVKZ7GIVF8_iZ1mP64CS56JfupSbNVo8NIzI85lfPqNSQ6J8qWR58ZEreO4kx-oUMZpMPQE-ubH5EvNf6FCxN0YMqDsLNm2LvsfdTDKZjzXnRU0lFd1jSsCnJO5mKkZZ92ifADEEntDjw7pfZuee1GWzbRRqp2D<redacted>
            """.trimIndent()


    val om = jacksonObjectMapper()

    val theBody = theLicense.split(".")[1]
        .let { Base64.getDecoder().decode(it).toString(Charsets.UTF_8) }
        .let { om.readTree(it) as ObjectNode }


    println("The Key:")
    for (name in theBody.fieldNames().asSequence().sortedBy{it.lowercase()}) {
        println("  $name: " + theBody.get(name)?.toPrettyString()?.take(40))
    }
    println()


    val lvPayload = theBody.get("lv.payload") as ObjectNode

    println("The LV Payload Key:")
    for (name in lvPayload.fieldNames().asSequence().sortedBy{it.lowercase()}) {
        println("  $name: \n" + lvPayload.get(name)?.toPrettyString())
    }
    println()


    val certs = lvPayload.get("info").get("certs") as ObjectNode

    val keyPair = certs.map { PEMParser(StringReader(it.textValue())).readObject()} .filterIsInstance<PEMKeyPair>().first()

    for (cert in certs) {
        println("\n\n=================================")
        println("Cert: " + cert.asText())

        runCatching {
            val obj = PEMParser(StringReader(cert.textValue())).readObject()
            println(obj)

            runCatching {
                val holder = obj as X509CertificateHolder
                val certificate = holder

                // Get the common fields
                println("Version: ${certificate.version}")
                println("Serial Number: ${certificate.serialNumber}")
                println("Issuer: ${certificate.issuer}")
                println("Subject: ${certificate.subject}")
                println("Not Before: ${certificate.notBefore}")
                println("Not After: ${certificate.notAfter}")


                val basicConstraints = runCatching {
                    BasicConstraints.getInstance(holder.getExtension(Extension.basicConstraints))
                }.getOrNull()
                println("Basic Constraints: $basicConstraints")

                holder.extensions.extensionOIDs.associateWith { holder.extensions.getExtensionParsedValue(it) }
                    .forEach { (k, v) ->
                        println("Extension $k -> $v")
                    }


                val publicKey = holder.subjectPublicKeyInfo.parsePublicKey().toASN1Primitive()
                println("PublicKey is the same: " + publicKey.equals(keyPair.publicKeyInfo.parsePublicKey()))

            }.getOrElse {
                println("Error: $it")
            }
        }
    }
}